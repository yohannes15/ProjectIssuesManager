@model IssuesAndAssociatedProjects

@{
    ViewData["Title"] = "My Bugs";
    var issuesByDueDate = Model.MyIssues.OrderByDescending(d => d.DueDate);

}
@*<div>
        <a class="btn btn-primary" href="@Url.Action("addbug", "home")">Add Bug</a>
    </div>*@

<div class="table-responsive-xl" id="style-7">
    <table class="table table-hover table-borderless table-striped">
        <thead>
            <tr>
                <th scope="col">Issue Name</th>
                <th scope="col">Submitter Id</th>
                <th scope="col">Assignee Id</th>
                <th scope="col">Issue Status</th>
                <th scope="col">Issue Priority</th>
                <th scope="col">Issue Entered</th>
                <th scope="col">Due Date</th>
                <th scope="col">Associated Project</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var issue in issuesByDueDate)
            {
                <tr>
                    <th><a href="@Url.Action("issuedetails", "issue", new { issueId = issue.IssueId })">@issue.Title</a></th>
                    <td>@issue.SubmitterUserName</td>
                    <td>
                        @issue.AssigneeUserName
                </td>
                <td>
                    @{
                        var statusBackgroundColor = "";
                        var badgeText = "";
                        switch (issue.IssueStatus)
                        {
                            case IssueStatus.closed:
                                badgeText = "Closed";
                                statusBackgroundColor = "#00bc8c";
                                break;
                            case IssueStatus.open:
                                badgeText = "Open";
                                statusBackgroundColor = "#375a7f";
                                break;
                            case IssueStatus.to_be_tested:
                                statusBackgroundColor = "#3498DB";
                                badgeText = "To Be Tested";
                                break;
                        }
                    }
                    <span class="badge badge-pill" style="background-color: @statusBackgroundColor; color: black;">@badgeText</span>
                </td>
                <td>
                    @{
                        var seveirtyBackgroundColor = "";
                        switch (issue.IssuePriority)
                        {
                            case IssuePriority.critical:
                                seveirtyBackgroundColor = "#b81c04";
                                break;
                            case IssuePriority.major:
                                seveirtyBackgroundColor = "#d67404";
                                break;
                            case IssuePriority.minor:
                                seveirtyBackgroundColor = "#ffee00";
                                break;
                        }
                    }
                    <span class="badge badge-pill" style="background-color: @seveirtyBackgroundColor; color: black;">@issue.IssuePriority</span>
                </td>
                <td>@issue.CreatedTime.ToShortDateString()</td>
                <td>@issue.DueDate.ToShortDateString()</td>
                @{
                    var associatedProject = new List<Project>();
                    foreach (var project in Model.AssociatedProjects)
                    {
                        if (issue.AssociatedProject == project.ProjectId)
                        {
                            associatedProject.Add(project);
                            break;
                        }
                    }
                }
                <td><a href="@Url.Action("projectdetails", "project", new { projectId = associatedProject[0].ProjectId })">@associatedProject[0].ProjectName</a></td>
            </tr>
        }
        </tbody>
    </table>
</div>
